/**
 * Este script é acionado quando o formulário HTML envia dados (POST).
 * Ele pega os dados e os adiciona a uma planilha do Google.
 *
 * Siga o arquivo 'instrucoes.md' para publicar este script como um App da Web.
 */

// O nome da aba/página na sua planilha onde as respostas serão salvas.
const NOME_DA_ABA = "Respostas";

// A ordem exata das colunas na planilha.
// IMPORTANTE: Isso DEVE corresponder aos atributos 'name' no seu formulário HTML.
const ORDEM_DAS_COLUNAS = [
  'atendimento',
  'tempo_espera',
  'limpeza',
  'experiencia_geral',
  'retornaria',
  'recomendar',
  'timestamp' // Adicionado automaticamente pelo JavaScript do formulário
];

/**
 * Função principal que lida com requisições POST.
 */
function doPost(e) {
  try {
    // 1. Obter a planilha ativa e a aba correta
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = spreadsheet.getSheetByName(NOME_DA_ABA);

    // Se a aba "Respostas" não existir, crie-a.
    if (!sheet) {
      sheet = spreadsheet.insertSheet(NOME_DA_ABA);
    }

    // 2. Parsear os dados JSON enviados pelo formulário
    const data = JSON.parse(e.postData.contents);

    // 3. Verificar e adicionar cabeçalhos (se a planilha estiver vazia)
    if (sheet.getLastRow() === 0) {
      sheet.appendRow(ORDEM_DAS_COLUNAS);
      // Formatar cabeçalhos em negrito
      sheet.getRange(1, 1, 1, ORDEM_DAS_COLUNAS.length).setFontWeight("bold");
    }

    // 4. Mapear os dados para a ordem correta das colunas
    // Isso garante que os dados sejam inseridos nas colunas corretas,
    // mesmo que a ordem no JSON seja diferente.
    const newRow = ORDEM_DAS_COLUNAS.map(colName => {
      return data[colName] || ""; // Retorna o valor ou uma string vazia se não for encontrado
    });

    // 5. Adicionar a nova linha de dados à planilha
    sheet.appendRow(newRow);

    // 6. Retornar uma resposta de sucesso em JSON
    // Isso permite que o JavaScript do lado do cliente saiba que tudo deu certo.
    return ContentService
      .createTextOutput(JSON.stringify({ "status": "success", "data": JSON.stringify(data) }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    // 7. Em caso de erro, retornar uma resposta de erro em JSON
    return ContentService
      .createTextOutput(JSON.stringify({ "status": "error", "message": error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}
